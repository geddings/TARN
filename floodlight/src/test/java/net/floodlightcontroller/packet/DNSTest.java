package net.floodlightcontroller.packet;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

/**
 * Created by @geddings on 11/9/17.
 */
public class DNSTest {

    private byte[] dnsClemsonQuery = new byte[]{
            0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x63, 0x6c, 0x65,
            0x6d, 0x73, 0x6f, 0x6e, 0x03, 0x65, 0x64, 0x75,
            0x00, 0x00, 0x01, 0x00, 0x01
    };
    
    private byte[] dnsGmailQuery = new byte[] {
            (byte) 0xa5, 0x60, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x69, 0x6d, 0x61,
            0x70, 0x05, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x03,
            0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01
    };

    private byte[] dnsClemsonResponse = new byte[] {
            (byte) 0xa1, 0x5a, (byte) 0x81, (byte) 0x80, 0x00, 0x01, 0x00, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x07, 0x63, 0x6c, 0x65,
            0x6d, 0x73, 0x6f, 0x6e, 0x03, 0x65, 0x64, 0x75,
            0x00, 0x00, 0x01, 0x00, 0x01, (byte) 0xc0, 0x0c, 0x00,
            0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x69, 0x00,
            0x04, (byte) 0x82, 0x7f, (byte) 0xcc, 0x1e
    };
    
    private byte[] dnsClemsonLongResponse = new byte[] {
            (byte) 0x87, (byte) 0xf0, (byte) 0x85, (byte) 0x80, 0x00, 0x01, 0x00, 0x01,
            0x00, 0x03, 0x00, 0x05, 0x07, 0x63, 0x6c, 0x65,
            0x6d, 0x73, 0x6f, 0x6e, 0x03, 0x65, 0x64, 0x75,
            0x00, 0x00, 0x01, 0x00, 0x01, (byte) 0xc0, 0x0c, 0x00,
            0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00,
            0x04, (byte) 0x82, 0x7f, (byte) 0xcc, 0x1e, (byte) 0xc0, 0x0c, 0x00,
            0x02, 0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00,
            0x09, 0x06, 0x65, 0x78, 0x74, 0x6e, 0x73, 0x31,
            (byte) 0xc0, 0x0c, (byte) 0xc0, 0x0c, 0x00, 0x02, 0x00, 0x01,
            0x00, 0x00, 0x0e, 0x10, 0x00, 0x09, 0x06, 0x65,
            0x78, 0x74, 0x6e, 0x73, 0x33, (byte) 0xc0, 0x0c, (byte) 0xc0,
            0x0c, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x0e,
            0x10, 0x00, 0x09, 0x06, 0x65, 0x78, 0x74, 0x6e,
            0x73, 0x32, (byte) 0xc0, 0x0c, (byte) 0xc0, 0x39, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x04,
            (byte) 0x82, 0x7f, (byte) 0xff, (byte) 0xfc, (byte) 0xc0, 0x63, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x04,
            (byte) 0x82, 0x7f, (byte) 0xff, (byte) 0xfd, (byte) 0xc0, 0x4e, 0x00, 0x01,
            0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x04,
            (byte) 0xc0, 0x05, (byte) 0xdb, 0x0a, (byte) 0xc0, 0x39, 0x00, 0x1c,
            0x00, 0x01, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x10,
            0x26, 0x20, 0x01, 0x03, (byte) 0xa0, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x52,
            (byte) 0xc0, 0x63, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00,
            0x0e, 0x10, 0x00, 0x10, 0x26, 0x20, 0x01, 0x03,
            (byte) 0xa0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x53
    };

    @Test
    public void testQuerySerialization() {
        byte[] dnsQuery = new DNS()
                .setTransactionId((short) 0x0001)
                .setFlags((short) 0x0100)
                .setQuestions(1)
                .addQuery(new DNS.Query("clemson.edu"))
                .serialize();
        
        Assert.assertTrue(Arrays.equals(dnsClemsonQuery, dnsQuery));

        dnsQuery = new DNS()
                .setTransactionId((short) 0xa560)
                .setFlags((short) 0x0100)
                .setQuestions(1)
                .addQuery(new DNS.Query("imap.gmail.com"))
                .serialize();

        Assert.assertTrue(Arrays.equals(dnsGmailQuery, dnsQuery));
    }
    
    @Test
    public void testResponseSerialization() {
        byte[] dnsResponse = new DNS()
                .setTransactionId((short) 0xa15a)
                .setFlags((short) 0x8180)
                .setQuestions(1)
                .setAnswerRRs(1)
                .setAuthorityRRs(0)
                .setAdditionalRRs(0)
                .addQuery(new DNS.Query("clemson.edu"))
                .addAnswer(new DNS.Answer("clemson.edu", DNS.RRTYPE.A, DNS.RRCLASS.IN, 105, (short) 4, "130.127.204.30"))
                .serialize();

        Assert.assertTrue(Arrays.equals(dnsClemsonResponse, dnsResponse));
    }

    @Test
    public void testQueryDeserialization() throws PacketParsingException {
        DNS queryExpected = new DNS()
                .setTransactionId((short) 0x0001)
                .setFlags((short) 0x0100)
                .setQuestions(1)
                .addQuery(new DNS.Query("clemson.edu"));

        DNS queryActual = (DNS) new DNS().deserialize(dnsClemsonQuery);

        Assert.assertEquals(queryExpected, queryActual);
    }

    @Test
    public void testResponseDeserialization() throws PacketParsingException {
        DNS responseExpected = new DNS()
                .setTransactionId((short) 0xa15a)
                .setFlags((short) 0x8180)
                .setQuestions(1)
                .setAnswerRRs(1)
                .setAuthorityRRs(0)
                .setAdditionalRRs(0)
                .addQuery(new DNS.Query("clemson.edu"))
                .addAnswer(new DNS.Answer("clemson.edu", DNS.RRTYPE.A, DNS.RRCLASS.IN, 105, (short) 4, "130.127.204.30"));

        DNS responseActual = (DNS) new DNS().deserialize(dnsClemsonResponse);

        Assert.assertEquals(responseExpected, responseActual);
    }
}
